package com.gemini.{{scriptName}}.service;
import com.gemini.{{scriptName}}.entity.{{schemaName}}.tables.daos.{{className}}Dao;
import com.gemini.{{scriptName}}.entity.{{schemaName}}.tables.pojos.{{className}};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Map;
import java.time.LocalDate;
import java.util.List;

@Service
public class {{className}}Service {


    @Autowired
    {{className}}Dao objectDao ;

//    {{#if primaryKeysFlag}}
//    {{#each subsequencePrimaryKeys}}public {{className}} get{{className}}By{{#each}}{{this.fieldName}}{{/each}}({{#each}}{{this.datatype}} {{this.fieldName}}{{#unless @last}},{{/unless}}{{/each}}){
//        return objectDao.fetchRecordBy{{#each}}{{this.fieldName}}{{/each}}({{#each}}{{this.fieldName}}{{#unless @last}},{{/unless}}{{/each}});
//    }
//    {{/each}}
//    {{else}}
//    {{#each subsequencePrimaryKeys}}public List<{{className}}> get{{className}}By{{#each}}{{this.fieldName}}{{/each}}({{#each}}{{this.datatype}} {{this.fieldName}}{{#unless @last}},{{/unless}}{{/each}}){
//        return objectDao.fetchRecordBy{{#each}}{{this.fieldName}}{{/each}}({{#each}}{{this.fieldName}}{{#unless @last}},{{/unless}}{{/each}});
//    }
//    {{/each}}
//    {{/if}}

    public List<{{className}}> get{{className}}({{#each primaryKeys}}{{datatype}} {{fieldName}},{{/each}}{{#each variable}}{{datatype}} {{fieldName}}{{#unless @last}},{{/unless}}{{/each}}){
         return objectDao.fetchRecord({{#each primaryKeys}} {{fieldName}},{{/each}}{{#each variable}} {{fieldName}}{{#unless @last}},{{/unless}}{{/each}});
    }
    public int update{{className}}({{className}} classObject){
         return objectDao.updateRecord(classObject);
    }

    public Map<Integer,List<{{className}}>> updateBatch{{className}}(List<{{className}}> classObjects){
         return objectDao.updateBatchRecord(classObjects);
    }

    public {{className}} patchUpdate{{className}}({{className}} classObject){
        return objectDao.patchUpdateRecord(classObject);
    }

    public {{className}} add{{className}}({{className}} classObject){
         return objectDao.insertRecord(classObject);
    }

    public Map<Integer,List<{{className}}>> addBatch{{className}}(List<{{className}}> classObjects){
         return objectDao.insertBatchRecord(classObjects);
    }

    public int delete{{className}}({{#each primaryKeys}}{{datatype}} {{fieldName}}{{#unless @last}},{{/unless}}{{/each}}){
          return objectDao.deleteRecord({{#each primaryKeys}}{{fieldName}}{{#unless @last}},{{/unless}}{{/each}});
    }

    public Map<Integer,List<{{className}}>> deleteBatch{{className}}(List<{{className}}> classObjects){
          return objectDao.deleteBatchRecord(classObjects);
    }
}
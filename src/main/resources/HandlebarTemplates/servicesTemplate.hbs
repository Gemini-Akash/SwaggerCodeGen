package com.gemini.{{scriptName}}.service;
import com.gemini.{{scriptName}}.entity.{{schemaName}}.tables.daos.{{className}}Dao;
import com.gemini.{{scriptName}}.entity.{{schemaName}}.tables.pojos.{{className}};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.ArrayList;
import java.util.List;

@Service
public class {{className}}Service {

    private static final Logger LOG = LoggerFactory.getLogger({{className}}Service.class);

    @Autowired
    {{className}}Dao objectDao ;

    {{#each subsequencePrimaryKeys}}public {{className}} get{{className}}({{#each}}{{this.datatype}} {{this.fieldName}}{{#unless @last}},{{/unless}}{{/each}}){
         return objectDao.fetchRecord({{#each}}{{this.fieldName}}{{#unless @last}},{{/unless}}{{/each}});
    }
    {{/each}}

    public int update{{className}}(List<{{className}}> classObject){
         objectDao.updateRecord(classObject);
    }
    public int update{{className}}({{className}} classObject){
         return objectDao.updateRecord(classObject);
    }

    public List<{{className}}> patchUpdate{{className}}(List<{{className}}> classObject){
        objectDao.update(classObject);
        List<{{className}}> result = new ArrayList<>();
        for({{className}} object: classObject){
            result.add(objectDao.fetchRecord({{#each primaryKeys}}object.get{{fieldName}}(){{#unless @last}},{{/unless}}{{/each}});
        }
        return result;
    }

    public {{className}} patchUpdate{{className}}({{className}} classObject){
        objectDao.update(classObject);
        return objectDao.fetchRecord({{#each primaryKeys}}classObject.get{{fieldName}}(){{#unless @last}},{{/unless}}{{/each}});
    }

    public List<{{className}}> add{{className}}(List<{{className}}> classObject){
         return objectDao.insertRecord(classObject);
    }

    public int delete{{className}}({{#each primaryKeys}}{{datatype}} {{fieldName}}{{#unless @last}},{{/unless}}{{/each}}){
          return objectDao.deleteRecord(({{#each primaryKeys}}{{fieldName}}{{#unless @last}},{{/unless}}{{/each}});
    }

}
package test.entity;

/*
 * This file is generated by jOOQ.
 */

import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.LocalDate;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
        name = "AUTHOR",
        uniqueConstraints = {
                @UniqueConstraint(name = "CONSTRAINT_7", columnNames = { "ID" })
        }
)
public class Author implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @Column(name = "ID", nullable = false, precision = 7)
    private Integer   ID;
    @Column(name = "FIRST_NAME", length = 50)
    private String    FIRST_NAME;
    @Column(name = "LAST_NAME", nullable = false, length = 50)
    private String    LAST_NAME;
    @Column(name = "DATE_OF_BIRTH", precision = 10)
    private LocalDate DATE_OF_BIRTH;
    @Column(name = "YEAR_OF_BIRTH", precision = 7)
    private Integer   YEAR_OF_BIRTH;
    @Column(name = "DISTINGUISHED", precision = 1)
    private Byte      DISTINGUISHED;

    public Author() {}

    public Author(Author value) {
        this.ID = value.ID;
        this.FIRST_NAME = value.FIRST_NAME;
        this.LAST_NAME = value.LAST_NAME;
        this.DATE_OF_BIRTH = value.DATE_OF_BIRTH;
        this.YEAR_OF_BIRTH = value.YEAR_OF_BIRTH;
        this.DISTINGUISHED = value.DISTINGUISHED;
    }

    @ConstructorProperties({ "ID", "FIRST_NAME", "LAST_NAME", "DATE_OF_BIRTH", "YEAR_OF_BIRTH", "DISTINGUISHED" })
    public Author(
            Integer   ID,
            String    FIRST_NAME,
            String    LAST_NAME,
            LocalDate DATE_OF_BIRTH,
            Integer   YEAR_OF_BIRTH,
            Byte      DISTINGUISHED
    ) {
        this.ID = ID;
        this.FIRST_NAME = FIRST_NAME;
        this.LAST_NAME = LAST_NAME;
        this.DATE_OF_BIRTH = DATE_OF_BIRTH;
        this.YEAR_OF_BIRTH = YEAR_OF_BIRTH;
        this.DISTINGUISHED = DISTINGUISHED;
    }

    /**
     * Getter for <code>AUTHOR.ID</code>.
     */
    @NotNull
    public Integer getId() {
        return this.ID;
    }

    /**
     * Setter for <code>AUTHOR.ID</code>.
     */
    public void setId(Integer ID) {
        this.ID = ID;
    }

    /**
     * Getter for <code>AUTHOR.FIRST_NAME</code>.
     */
    @Size(max = 50)
    public String getFirstName() {
        return this.FIRST_NAME;
    }

    /**
     * Setter for <code>AUTHOR.FIRST_NAME</code>.
     */
    public void setFirstName(String FIRST_NAME) {
        this.FIRST_NAME = FIRST_NAME;
    }

    /**
     * Getter for <code>AUTHOR.LAST_NAME</code>.
     */
    @NotNull
    @Size(max = 50)
    public String getLastName() {
        return this.LAST_NAME;
    }

    /**
     * Setter for <code>AUTHOR.LAST_NAME</code>.
     */
    public void setLastName(String LAST_NAME) {
        this.LAST_NAME = LAST_NAME;
    }

    /**
     * Getter for <code>AUTHOR.DATE_OF_BIRTH</code>.
     */
    public LocalDate getDateOfBirth() {
        return this.DATE_OF_BIRTH;
    }

    /**
     * Setter for <code>AUTHOR.DATE_OF_BIRTH</code>.
     */
    public void setDateOfBirth(LocalDate DATE_OF_BIRTH) {
        this.DATE_OF_BIRTH = DATE_OF_BIRTH;
    }

    /**
     * Getter for <code>AUTHOR.YEAR_OF_BIRTH</code>.
     */
    public Integer getYearOfBirth() {
        return this.YEAR_OF_BIRTH;
    }

    /**
     * Setter for <code>AUTHOR.YEAR_OF_BIRTH</code>.
     */
    public void setYearOfBirth(Integer YEAR_OF_BIRTH) {
        this.YEAR_OF_BIRTH = YEAR_OF_BIRTH;
    }

    /**
     * Getter for <code>AUTHOR.DISTINGUISHED</code>.
     */
    public Byte getDistinguished() {
        return this.DISTINGUISHED;
    }

    /**
     * Setter for <code>AUTHOR.DISTINGUISHED</code>.
     */
    public void setDistinguished(Byte DISTINGUISHED) {
        this.DISTINGUISHED = DISTINGUISHED;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Author (");

        sb.append(ID);
        sb.append(", ").append(FIRST_NAME);
        sb.append(", ").append(LAST_NAME);
        sb.append(", ").append(DATE_OF_BIRTH);
        sb.append(", ").append(YEAR_OF_BIRTH);
        sb.append(", ").append(DISTINGUISHED);

        sb.append(")");
        return sb.toString();
    }
}
